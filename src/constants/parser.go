// SPDX-License-Identifier: GPL-3.0-or-later
package constants

const (
	_ int = iota
	PRECEDENCE_LOWEST
	PRECEDENCE_ASSIGN   // = := += -= *= /= %=
	PRECEDENCE_IF       // ?? ::
	PRECEDENCE_OR       // or
	PRECEDENCE_AND      // and
	PRECEDENCE_EQ       // == != < > <= >=
	PRECEDENCE_CONCAT   // :
	PRECEDENCE_QM       // ?
	PRECEDENCE_BTWOR    // |
	PRECEDENCE_BTWXOR   // ^
	PRECEDENCE_BTWAND   // &
	PRECEDENCE_BTWSHIFT // << >>
	PRECEDENCE_SUM      // + -
	PRECEDENCE_PRODUCT  // * / %
	PRECEDENCE_PREFIX   // prefix
	PRECEDENCE_POSTFIX  // postfix
	PRECEDENCE_CALL     // (
	PRECEDENCE_DOT      // .
)

var PRECEDENCES = map[string]int{
	TOKEN_EQ:         PRECEDENCE_ASSIGN,
	TOKEN_COLONEQ:    PRECEDENCE_ASSIGN,
	TOKEN_PLUSEQ:     PRECEDENCE_ASSIGN,
	TOKEN_MINUSEQ:    PRECEDENCE_ASSIGN,
	TOKEN_MULTIPLYEQ: PRECEDENCE_ASSIGN,
	TOKEN_DIVIDEEQ:   PRECEDENCE_ASSIGN,
	TOKEN_MODULOEQ:   PRECEDENCE_ASSIGN,
	TOKEN_QMQM:       PRECEDENCE_IF,
	TOKEN_OROR:       PRECEDENCE_OR,
	TOKEN_ANDAND:     PRECEDENCE_AND,
	TOKEN_EQEQ:       PRECEDENCE_EQ,
	TOKEN_NOTEQ:      PRECEDENCE_EQ,
	TOKEN_LT:         PRECEDENCE_EQ,
	TOKEN_GT:         PRECEDENCE_EQ,
	TOKEN_LTEQ:       PRECEDENCE_EQ,
	TOKEN_GTEQ:       PRECEDENCE_EQ,
	TOKEN_COLON:      PRECEDENCE_CONCAT,
	TOKEN_QM:         PRECEDENCE_QM,
	TOKEN_OR:         PRECEDENCE_BTWOR,
	TOKEN_XOR:        PRECEDENCE_BTWXOR,
	TOKEN_AND:        PRECEDENCE_BTWAND,
	TOKEN_LTLT:       PRECEDENCE_BTWSHIFT,
	TOKEN_GTGT:       PRECEDENCE_BTWSHIFT,
	TOKEN_PLUS:       PRECEDENCE_SUM,
	TOKEN_MINUS:      PRECEDENCE_SUM,
	TOKEN_MULTIPLY:   PRECEDENCE_PRODUCT,
	TOKEN_DIVIDE:     PRECEDENCE_PRODUCT,
	TOKEN_MODULO:     PRECEDENCE_PRODUCT,
	TOKEN_LPAREN:     PRECEDENCE_CALL,
	TOKEN_DOT:        PRECEDENCE_DOT,
}
